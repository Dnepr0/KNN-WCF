//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.Services {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Patient", Namespace="http://schemas.datacontract.org/2004/07/Server")]
    [System.SerializableAttribute()]
    public partial class Patient : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AgeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NodesNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OperationYearField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Age {
            get {
                return this.AgeField;
            }
            set {
                if ((this.AgeField.Equals(value) != true)) {
                    this.AgeField = value;
                    this.RaisePropertyChanged("Age");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NodesNumber {
            get {
                return this.NodesNumberField;
            }
            set {
                if ((this.NodesNumberField.Equals(value) != true)) {
                    this.NodesNumberField = value;
                    this.RaisePropertyChanged("NodesNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OperationYear {
            get {
                return this.OperationYearField;
            }
            set {
                if ((this.OperationYearField.Equals(value) != true)) {
                    this.OperationYearField = value;
                    this.RaisePropertyChanged("OperationYear");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Services.IKNNService")]
    public interface IKNNService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKNNService/GetClass", ReplyAction="http://tempuri.org/IKNNService/GetClassResponse")]
        bool GetClass(Client.Services.Patient p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKNNService/GetClass", ReplyAction="http://tempuri.org/IKNNService/GetClassResponse")]
        System.Threading.Tasks.Task<bool> GetClassAsync(Client.Services.Patient p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKNNService/AddPatient", ReplyAction="http://tempuri.org/IKNNService/AddPatientResponse")]
        void AddPatient(Client.Services.Patient p, bool c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKNNService/AddPatient", ReplyAction="http://tempuri.org/IKNNService/AddPatientResponse")]
        System.Threading.Tasks.Task AddPatientAsync(Client.Services.Patient p, bool c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKNNService/GetServiceInfo", ReplyAction="http://tempuri.org/IKNNService/GetServiceInfoResponse")]
        string GetServiceInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKNNService/GetServiceInfo", ReplyAction="http://tempuri.org/IKNNService/GetServiceInfoResponse")]
        System.Threading.Tasks.Task<string> GetServiceInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKNNService/GetDatasetInfo", ReplyAction="http://tempuri.org/IKNNService/GetDatasetInfoResponse")]
        string GetDatasetInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKNNService/GetDatasetInfo", ReplyAction="http://tempuri.org/IKNNService/GetDatasetInfoResponse")]
        System.Threading.Tasks.Task<string> GetDatasetInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKNNService/Exit", ReplyAction="http://tempuri.org/IKNNService/ExitResponse")]
        void Exit();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKNNService/Exit", ReplyAction="http://tempuri.org/IKNNService/ExitResponse")]
        System.Threading.Tasks.Task ExitAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IKNNServiceChannel : Client.Services.IKNNService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class KNNServiceClient : System.ServiceModel.ClientBase<Client.Services.IKNNService>, Client.Services.IKNNService {
        
        public KNNServiceClient() {
        }
        
        public KNNServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public KNNServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public KNNServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public KNNServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool GetClass(Client.Services.Patient p) {
            return base.Channel.GetClass(p);
        }
        
        public System.Threading.Tasks.Task<bool> GetClassAsync(Client.Services.Patient p) {
            return base.Channel.GetClassAsync(p);
        }
        
        public void AddPatient(Client.Services.Patient p, bool c) {
            base.Channel.AddPatient(p, c);
        }
        
        public System.Threading.Tasks.Task AddPatientAsync(Client.Services.Patient p, bool c) {
            return base.Channel.AddPatientAsync(p, c);
        }
        
        public string GetServiceInfo() {
            return base.Channel.GetServiceInfo();
        }
        
        public System.Threading.Tasks.Task<string> GetServiceInfoAsync() {
            return base.Channel.GetServiceInfoAsync();
        }
        
        public string GetDatasetInfo() {
            return base.Channel.GetDatasetInfo();
        }
        
        public System.Threading.Tasks.Task<string> GetDatasetInfoAsync() {
            return base.Channel.GetDatasetInfoAsync();
        }
        
        public void Exit() {
            base.Channel.Exit();
        }
        
        public System.Threading.Tasks.Task ExitAsync() {
            return base.Channel.ExitAsync();
        }
    }
}
